// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - connected to Clerk authentication
model User {
  id            String    @id @default(uuid())
  clerkId       String    @unique // External auth ID from Clerk
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  expenses      Expense[]
  incomes       Income[]
  budgets       Budget[]
  financialGoals FinancialGoal[]
  aiInsights    AIInsight[]
}

// Expense model
model Expense {
  id            String    @id @default(uuid())
  amount        Float
  description   String
  category      String
  date          DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Income model
model Income {
  id            String    @id @default(uuid())
  amount        Float
  source        String
  description   String?
  date          DateTime
  recurring     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Budget model
model Budget {
  id            String    @id @default(uuid())
  category      String
  amount        Float
  period        String    // monthly, weekly, annual, etc.
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Financial Goal model
model FinancialGoal {
  id            String    @id @default(uuid())
  title         String
  description   String?
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  achieved      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// AI Insight model (for storing AI-generated insights)
model AIInsight {
  id            String    @id @default(uuid())
  content       String    // The insight text
  category      String    // Type of insight (spending patterns, saving opportunities, etc.)
  read          Boolean   @default(false)
  important     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  
  // Relationships
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
